name: workspace

packages:
  - "./" 
  - "packages/**"

ignore:
  - "packages/**/example"
  - "packages/iridium/**"

sdkPath: .fvm/flutter_sdk

ide:
  intellij:
    enabled: false

command:
  bootstrap:
    runPubGetInParallel: false
    usePubspecOverrides: true

scripts:
  # Generate model for specific package
  generate:
    description: Generate model for specific package
    run: |
      melos exec -c 1 -- "dart run build_runner build --delete-conflicting-outputs"
    packageFilters:
      flutter: true
      dependsOn:
        - build_runner

  generate:i18n:
    description: Generate all i18n
    run: |
      melos exec -c 1 --depends-on="intl" -- "flutter pub get && flutter gen-l10n"

  ############################################################################
  # Global generation
  ############################################################################
  generate:all: |
    melos run generate:i18n && melos run generate:model && melos run generate:assets

  generate:model:
    description: Generate main project models
    run: |
      melos exec -c 1 --depends-on="build_runner" -- "dart run build_runner build --delete-conflicting-outputs"

  generate:assets:
    description: Generate main project assets
    run: |
      melos exec -c 1 --depends-on="flutter_gen_runner" -- "fluttergen -c pubspec.yaml"

  ############################################################################
  # Clean commands
  ############################################################################
  clean:
    description: Clean specific project
    run: flutter clean

  clean:deep:
    description: Clean all project
    run: |
      melos exec -c 1 --fail-fast -- "flutter clean" && find . -type f -name "*.lock" -delete && find . -type f -name "pubspec_overrides.yaml" -delete && find . -type f -name "*.freezed.dart" -delete && find . -type f -name "*.g.dart" -delete

  ############################################################################
  # Global linter commands
  ############################################################################
  lint:all:
    description: Run all static analysis checks.
    run: |
      melos run analyze && melos run format

  analyze:
    description: |
      Run `flutter analyze` in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.
    # We are setting the concurrency to 1 because a higher concurrency can crash
    # the analysis server on low performance machines (like GitHub Actions).
    run: |
      melos exec -c 1 -- "flutter analyze . --fatal-infos"

  format:
    description: Run `dart format` for all packages.
    run: |
      melos exec -- "dart format . --line-length 80 --fix"

  format-check:
    description: Run `dart format` checks for all packages.
    run: |
      melos exec -- "dart format . --line-length 80 --set-exit-if-changed"

  ############################################################################
  # Global test commands
  ############################################################################
  test:
    description: Run `flutter test` for selected packages.
    run: |
      melos exec -c 1 -- "flutter test"
    packageFilters:
      dirExists:
        - test

  test:all:
    description: Run all Flutter tests in this project.
    run: |
      melos run test --no-select

  test:coverage:
    description: Generate coverage for the selected package.
    run: |
      melos exec -- "flutter test --machine --coverage > tests.output"
    packageFilters:
      dirExists:
        - test

  test:update-goldens:
    description: Re-generate all golden test files
    run: |
      melos exec -- "flutter test --update-goldens"
    packageFilters:
      dirExists: test
